<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Chess</name>
    </assembly>
    <members>
        <member name="M:Chess.Board.placePieces(Chess.Board)">
            <summary>
            Clear the board and place each piece on the board
            </summary>
            <param name="board"></param>
        </member>
        <member name="M:Chess.ConnectToDB.InitConnection">
            <summary>
            Initialize the connection to the database
            </summary>
        </member>
        <member name="M:Chess.ConnectToDB.OpenConnection">
            <summary>
            Open connection to the database
            </summary>
        </member>
        <member name="M:Chess.ConnectToDB.AddPlayer(System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            add a player in the table "players"
            </summary>
            <param name="pseudo"></param>
        </member>
        <member name="M:Chess.ConnectToDB.LoginPlayer(System.String,System.String)">
            <summary>
            add a player in the table "players"
            </summary>
            <param name="pseudo"></param>
        </member>
        <member name="M:Chess.ConnectToDB.GetPlayerName(System.Int32)">
            <summary>
            get the name of the player according to his id
            </summary>
            <param name="id">id of the player</param>
            <returns></returns>
        </member>
        <member name="M:Chess.ConnectToDB.CloseConnection">
            <summary>
            Close connection to the database
            </summary>
        </member>
        <member name="F:Chess.CryptoPassword.saltSize">
            <summary>
            Size of salt.
            </summary>
        </member>
        <member name="F:Chess.CryptoPassword.hashSize">
            <summary>
            Size of hash.
            </summary>
        </member>
        <member name="F:Chess.CryptoPassword.iterations">
            <summary>
            Numbre of iterations.
            </summary>
        </member>
        <member name="M:Chess.CryptoPassword.Verify(System.String,System.String)">
            <summary>
            Verifies a password against a hash.
            </summary>
            <param name="password">The password.</param>
            <param name="hashedPassword">The hash.</param>
            <returns>Could be verified?</returns>
        </member>
        <member name="M:Chess.Pawn.CanMoveThere(System.Int32,System.Int32,Chess.Board)">
            <summary>
            the pawn deplacement
            </summary>
            <param name="x">position X</param>
            <param name="y">position Y</param>
            <param name="board">in the game</param>
            <returns></returns>
        </member>
        <member name="M:Chess.Knight.CanMoveThere(System.Int32,System.Int32,Chess.Board)">
            <summary>
            the knight deplacement 
            </summary>
            <param name="x">position X</param>
            <param name="y">position Y</param>
            <param name="board">in the game</param>
            <returns></returns>
        </member>
        <member name="M:Chess.Rook.CanMoveThere(System.Int32,System.Int32,Chess.Board)">
            <summary>
            the rook deplacement 
            </summary>
            <param name="x">position X</param>
            <param name="y">position Y</param>
            <param name="board">in the game</param>
            <returns></returns>
        </member>
        <member name="M:Chess.Bishop.CanMoveThere(System.Int32,System.Int32,Chess.Board)">
            <summary>
            the bishop deplacement
            </summary>
            <param name="x">position X</param>
            <param name="y">position Y</param>
            <param name="board">in the game</param>
            <returns></returns>
        </member>
        <member name="M:Chess.Queen.CanMoveThere(System.Int32,System.Int32,Chess.Board)">
            <summary>
            the queen deplacement
            </summary>
            <param name="x">position X</param>
            <param name="y">position Y</param>
            <param name="board">in the game</param>
            <returns></returns>
        </member>
        <member name="M:Chess.King.CanMoveThere(System.Int32,System.Int32,Chess.Board)">
            <summary>
            the king deplacement 
            </summary>
            <param name="x">position X</param>
            <param name="y">position Y</param>
            <param name="board">int the game</param>
            <returns></returns>
        </member>
        <member name="M:Chess.King.IsChecked(Chess.Board)">
            <summary>
            Check if the king is checked
            </summary>
            <param name="board">in the game</param>
            <returns></returns>
        </member>
        <member name="M:Chess.King.IsCheckMated(System.Int32,System.Int32,Chess.Board)">
            <summary>
            check if the king is check mated
            </summary>
            <param name="x">king position</param>
            <param name="y">king position</param>
            <param name="board">in the game</param>
            <returns></returns>
        </member>
        <member name="M:Chess.Piece.CanMoveThere(System.Int32,System.Int32,Chess.Board)">
            <summary>
            where the piece can move
            </summary>
            <param name="x">the position in X</param>
            <param name="y">the position in Y</param>
            <param name="board">Board name</param>
            <returns></returns>
        </member>
        <member name="M:Chess.Piece.IsChecked(Chess.Board)">
            <summary>
            Îf it's checked return false
            </summary>
            <param name="board">board name</param>
            <returns></returns>
        </member>
        <member name="M:Chess.Piece.IsCheckMated(System.Int32,System.Int32,Chess.Board)">
            <summary>
            If it's check mated return false
            </summary>
            <param name="x">position of the king in X</param>
            <param name="y">position of the king in Y</param>
            <param name="board">the game under way</param>
            <returns></returns>
        </member>
        <member name="M:Chess.Piece.giveDirection(System.Int32,System.Int32)">
            <summary>
            give the direction where you can move
            </summary>
            <param name="a">Return X</param>
            <param name="b">Return Y</param>
            <returns></returns>
        </member>
        <member name="M:Chess.Program.Main">
            <summary>
            Point d'entrée principal de l'application.
            </summary>
        </member>
        <member name="T:Chess.Properties.Resources">
            <summary>
              Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
            </summary>
        </member>
        <member name="P:Chess.Properties.Resources.ResourceManager">
            <summary>
              Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
            </summary>
        </member>
        <member name="P:Chess.Properties.Resources.Culture">
            <summary>
              Remplace la propriété CurrentUICulture du thread actuel pour toutes
              les recherches de ressources à l'aide de cette classe de ressource fortement typée.
            </summary>
        </member>
    </members>
</doc>
