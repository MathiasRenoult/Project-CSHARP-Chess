<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pctCase00.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>